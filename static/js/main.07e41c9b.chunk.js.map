{"version":3,"sources":["Assests/Logo.png","Assests/EmptyImage.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","removeRectangles","e","drawRef","clear","setState","tools","downloadJSONFile","a","state","imageArray","coordinates","coordinatesData","Object","keys","map","item","NewObject","name","fileName","rects","push","json","JSON","stringify","blob","Blob","type","URL","createObjectURL","href","link","document","createElement","download","body","appendChild","click","removeChild","onDrop","files","currentImageIndex","file","handleSubmit","imageHeight","imageWidth","preventDefault","rectangleRef","toJSON","data","objects","NewCoordinate","x1","left","toFixed","top","x2","width","y1","height","y2","onImageClicked","previousImageIndex","displayImages","index","Item","alt","onClick","className","src","generateRandomColor","Math","floor","random","this","Fragment","Logo","IconButton","style","background","position","EmptyImage","color","ref","node","tool","Tools","Select","Pan","Rectangle","lineColor","lineWidth","Button","getRootProps","getInputProps","cols","rows","gap","loop","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.07e41c9b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Logo.09f434a8.png\";","export default __webpack_public_path__ + \"static/media/EmptyImage.fa3e438d.svg\";","import React from \"react\";\nimport { SketchField, Tools } from \"react-sketch\";\nimport Logo from \"./Assests/Logo.png\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FormatShapesIcon from \"@mui/icons-material/FormatShapes\";\nimport OpenWithIcon from \"@mui/icons-material/OpenWith\";\nimport { Button, IconButton } from \"@mui/material\";\nimport EmptyImage from \"./Assests/EmptyImage.svg\";\nimport Carousel from \"react-grid-carousel\";\nimport Dropzone from \"react-dropzone\";\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      coordinates: {},  //{\"imageindex\":[coordinates]}\n      tools: \"rectangle\",\n      imageArray: [],  // {\"fileName\":\"name\",\"file\":\"file\"}\n      currentImageIndex: -1,\n      imageWidth: 700,\n      imageHeight: 500,\n    };\n  }\n\n  // remove the rectangles from the image\n  removeRectangles = (e) => {\n    if(this.drawRef)\n      this.drawRef.clear();\n    this.setState({ tools: \"rectangle\" });\n  };\n\n  // exporting json file\n  downloadJSONFile = async () => {\n    const { imageArray, coordinates } = this.state;\n\n    let coordinatesData = [];\n\n    Object.keys(coordinates).map((item) => {\n      const NewObject = {\n        name: imageArray[item].fileName,\n        rects: coordinates[item],\n      };\n      coordinatesData.push(NewObject);\n      return null;\n    });\n\n    const fileName = \"Export_coordinates\";\n    const json = JSON.stringify(coordinatesData, null, 2);\n    const blob = new Blob([json], { type: \"application/json\" });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = href;\n    link.download = fileName + \".json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // storing files in imageArray\n  onDrop = (files) => {\n    const { imageArray, currentImageIndex } = this.state;\n    files.map((file) => {\n      this.setState({\n        currentImageIndex: currentImageIndex === -1 ? 0 : currentImageIndex,\n        imageArray: [\n          ...imageArray,\n          {\n            fileName: file.name,\n            file: URL.createObjectURL(file),\n          },\n        ],\n      });\n      return null;\n    });\n  };\n\n  handleSubmit = (e) => {\n    const { currentImageIndex, coordinates, imageHeight, imageWidth } =\n      this.state;\n    e.preventDefault();\n\n    // if currentImage rectangle coordinates not present in coordinates array\n    if (currentImageIndex in coordinates === false) {\n      const rectangleRef = this.drawRef.toJSON();\n      let data = [];\n\n      // top left (left,top)\n      // top right (left+width,top)\n      // bottom left (left,top+height)\n      // bottom right (left+width,top+height)\n\n      rectangleRef.objects.map((item) => {\n        const NewCoordinate = {\n          x1: [\n            (item.left / imageWidth).toFixed(2),\n            (item.top / imageHeight).toFixed(2),\n          ],\n          x2: [\n            ((item.left + item.width) / imageWidth).toFixed(2),\n            (item.top / imageHeight).toFixed(2),\n          ],\n          y1: [\n            (item.left / imageWidth).toFixed(2),\n            ((item.top + item.height) / imageHeight).toFixed(2),\n          ],\n          y2: [\n            ((item.left + item.width) / imageWidth).toFixed(2),\n            ((item.top + item.height) / imageHeight).toFixed(2),\n          ],\n        };\n        data.push(NewCoordinate);\n\n        return null;\n      });\n\n      this.setState(\n        {\n          coordinates: { ...coordinates, [currentImageIndex]: data },\n        },\n        this.downloadJSONFile\n      );\n    } else {\n      this.downloadJSONFile();\n    }\n  };\n\n  // stores the rectangle coordinates of previous images\n  onImageClicked = (previousImageIndex, currentImageIndex) => {\n    const { imageWidth, imageHeight } = this.state;\n    const rectangleRef = this.drawRef.toJSON();\n\n    let data = [];\n\n    // top left (left,top)\n    // top right (left+width,top)\n    // bottom left (left,top+height)\n    // bottom right (left+width,top+height)\n    rectangleRef.objects.map((item) => {\n      const NewCoordinate = {\n        x1: [\n          (item.left / imageWidth).toFixed(2),\n          (item.top / imageHeight).toFixed(2),\n        ],\n        x2: [\n          ((item.left + item.width) / imageWidth).toFixed(2),\n          (item.top / imageHeight).toFixed(2),\n        ],\n        y1: [\n          (item.left / imageWidth).toFixed(2),\n          ((item.top + item.height) / imageHeight).toFixed(2),\n        ],\n        y2: [\n          ((item.left + item.width) / imageWidth).toFixed(2),\n          ((item.top + item.height) / imageHeight).toFixed(2),\n        ],\n      };\n      data.push(NewCoordinate);\n      return null;\n    });\n\n    // storing the rectangle coordinates\n    this.setState({\n      coordinates: { ...this.state.coordinates, [previousImageIndex]: data },\n    });\n\n    this.removeRectangles();\n    // changing the current Images Index\n    this.setState({ currentImageIndex: currentImageIndex });\n  };\n\n  //  displaying images in the carousel\n  displayImages = () => {\n    const { imageArray, currentImageIndex } = this.state;\n\n    return imageArray.map((item, index) => {\n      return (\n        <Carousel.Item key={index}>\n          <img\n            alt=\"\"\n            width=\"100%\"\n            onClick={() => this.onImageClicked(currentImageIndex, index)}\n            className={\n              index === currentImageIndex\n                ? \"main-carousel-selecteditem\"\n                : \"main-carousel-item\"\n            }\n            src={item.file}\n          />\n        </Carousel.Item>\n      );\n    });\n  };\n\n  // Generate random colors for rectanges\n  generateRandomColor = () =>\n    \"rgb(\" +\n    Math.floor(Math.random() * 256) +\n    \",\" +\n    Math.floor(Math.random() * 256) +\n    \",\" +\n    Math.floor(Math.random() * 256) +\n    \")\";\n\n  render() {\n    const { tools, imageArray, currentImageIndex } = this.state;\n\n    return (\n      <React.Fragment>\n        {/* Navbar section */}\n        <div className=\"header\">\n          <img className=\"logo\" src={Logo} alt=\"LITWIZ LABS\" />\n        </div>\n\n        {/* Main section */}\n        <div className=\"main\">\n          <div className=\"main-top\">\n            {/* Tools */}\n            <div className=\"main-tools\">\n              <IconButton\n                className=\"main-tools-icon\"\n                style={{ background: tools === \"pan\" ? \"#bbb8b8\" : \"#f5f5f5\" }}\n                onClick={() =>\n                  this.setState({ tools: tools === \"pan\" ? \"rectangle\" : \"pan\" })\n                }\n              >\n                <OpenWithIcon />\n              </IconButton>\n              <IconButton\n                className=\"main-tools-icon\"\n                style={{\n                  background: tools === \"select\" ? \"#bbb8b8\" : \"#f5f5f5\",\n                }}\n                onClick={() =>\n                  this.setState({\n                    tools: tools === \"select\" ? \"rectangle\" : \"select\",\n                  })\n                }\n              >\n                <FormatShapesIcon />\n              </IconButton>\n              <IconButton\n                className=\"main-tools-icon\"\n                style={{ background: \"#f5f5f5\" }}\n                onClick={this.removeRectangles}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </div>\n\n            {/* large Image */}\n            <div className=\"main-center\">\n              <div\n                className=\"main-center-imgdiv\"\n                style={{\n                  position: currentImageIndex === -1 ? \"relative\" : \"absolute\",\n                }}\n              >\n                {currentImageIndex !== -1 ? (\n                  <img\n                    width=\"700px\"\n                    height=\"500px\"\n                    alt=\"\"\n                    className=\"main-center-imgdiv-image\"\n                    src={imageArray[currentImageIndex].file}\n                  />\n                ) : (\n                  <>\n                    <img\n                      alt=\"\"\n                      className=\"main-center-imgdiv-emptyimage\"\n                      src={EmptyImage}\n                    />\n                    <h3 style={{ color: \"#9e9e9e\" }}>\n                      Nothing to Show. Upload any image\n                    </h3>\n                  </>\n                )}\n              </div>\n              <div className=\"main-center-canvasdiv\">\n                {currentImageIndex !== -1 && (\n                  <SketchField\n                    ref={(node) => (this.drawRef = node)}\n                    width={700}\n                    height={500}\n                    tool={\n                      tools === \"select\"\n                        ? Tools.Select\n                        : tools === \"pan\"\n                        ? Tools.Pan\n                        : Tools.Rectangle\n                    }\n                    lineColor={this.generateRandomColor}\n                    lineWidth={3}\n                  />\n                )}\n              </div>\n            </div>\n\n            {/* Actions section (upload/export) */}\n            <div className=\"main-actions\">\n              <Button\n                className=\"main-actions-export\"\n                onClick={this.handleSubmit}\n              >\n                Export\n              </Button>\n\n              <div className=\"main-actions-upload\">\n                <div className=\"main-actions-upload-title\">Upload a File</div>\n                <div className=\"main-actions-upload-section\">\n                  <div className=\"main-actions-upload-section-label\">\n                    <Dropzone onDrop={this.onDrop}>\n                      {({ getRootProps, getInputProps }) => (\n                        <section className=\"container\">\n                          <div {...getRootProps({ className: \"dropzone\" })}>\n                            <input {...getInputProps()} />\n                            <p>Click to browse or drag and drop your files</p>\n                          </div>\n                        </section>\n                      )}\n                    </Dropzone>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Bottom carousel */}\n          {currentImageIndex !== -1 && (\n            <div className=\"main-carousel\">\n              <Carousel cols={5} rows={1} gap={10} loop>\n                {this.displayImages()}\n              </Carousel>\n            </div>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import BrowserRouter from 'react-router-dom/BrowserRouter'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <BrowserRouter basename=\"/\">\n    <App />,\n  // </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}